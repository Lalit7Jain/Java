<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		 http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	 <!-- Context:annotation declares support for general annotations such as @Required, @Autowired, @PostConstruct, and so on.  -->
   <context:annotation-config/>
   <annotation-driven/>
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<context:component-scan base-package="com.neu.lalit" />
	<context:component-scan base-package="com.neu.lalit.pojo" />
	
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<beans:property name="maxUploadSize" value="5000000"/>
	</beans:bean>
	
	<beans:bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>	
		<beans:property name="packagesToScan" value="com.neu.lalit.pojo" />
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
                <beans:prop key="hibernate.format_sql">false</beans:prop>
                <beans:prop key="hibernate.generate_statistics">false</beans:prop>
                <beans:prop key="hibernate.max_fetch_depth">3</beans:prop>
                <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
				<beans:prop key="hibernate.query.factory_class">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</beans:prop>
            </beans:props>
        </beans:property>
	</beans:bean>

	<!--Using MChange ApI for DataSource: Makes Connections, pooling, referencing, serializing easy on JDBC driver -->		
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="com.mysql.jdbc.Driver" />
		<beans:property name="jdbcUrl" value="jdbc:mysql://localhost:3306/onlinejobportal?autoReconnect=true&amp;autoReconnectForPools=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull"/>
		<beans:property name="user" value="root" />
		<beans:property name="password" value="root" />
		<beans:property name="initialPoolSize" value="1" />
		<beans:property name="minPoolSize" value="1" />
		<beans:property name="maxPoolSize" value="50" />
		<beans:property name="maxIdleTime" value="80" />
		<beans:property name="idleConnectionTestPeriod" value="30" />
		<beans:property name="preferredTestQuery" value="SELECT 1" />
		<beans:property name="acquireIncrement" value="1" />
		<beans:property name="maxStatements" value="0" />
		<beans:property name="numHelperThreads" value="4" />
		<beans:property name="maxStatementsPerConnection" value="50" />
	</beans:bean>
    
    <!-- Used for @Transactional annotation needs a default bean with name = transactionManager. Defined here -->
    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory"/>
	</beans:bean>
    
   	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- JSR-303 Bean Validation wrapper for spring. Used at controller with @Valid -->
	<beans:bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	

	<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <beans:property name="messageConverters">
        <beans:list>
            <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
            <beans:bean class="org.springframework.http.converter.StringHttpMessageConverter" />
            <beans:bean class="org.springframework.http.converter.FormHttpMessageConverter" />
            <beans:bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
            <beans:bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
        </beans:list>
    </beans:property>
</beans:bean>
	
<interceptors>
	<interceptor>
		<mapping path="/"/>
		<beans:bean class="com.neu.lalit.interceptor.ExecuteTimeInterceptor"></beans:bean>
	</interceptor>
</interceptors>
	
</beans:beans>
